AWSTemplateFormatVersion: 2010-09-09
Description: >-
 AWS CloudFormation sample template for the IoT Device Lobby architecture.
Transform: "AWS::Serverless-2016-10-31"
Resources:
  DeviceLedgerTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "certid"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - 
          AttributeName: "certid"
          KeyType: "HASH"
      StreamSpecification: 
          StreamViewType: NEW_AND_OLD_IMAGES
      TableClass: STANDARD
      TableName: devicelobby-ledger
  DeviceInLobbyIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Connect
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":client/${iot:Connection.Thing.ThingName}"] ]
        - Effect: Allow
          Action: 
          - iot:Publish
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topic/$aws/rules/lobby"]]
        - Effect: Allow
          Action: 
          - iot:Subscribe
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topicfilter/lobby/${iot:Connection.Thing.ThingName}"]]
        - Effect: Allow
          Action: 
          - iot:Receive
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topic/lobby/${iot:Connection.Thing.ThingName}"]]
      PolicyName: device_in_lobby_iot_policy
  DeviceAppIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - iot:Connect
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":client/${iot:Connection.Thing.ThingName}"] ]
        - Effect: Allow
          Action: 
          - iot:Publish
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topic/*"]]
        - Effect: Allow
          Action: 
          - iot:Subscribe
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topic/*"]]
        - Effect: Allow
          Action: 
          - iot:Receive
          Resource:
          - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topic/*"]]
      PolicyName: device_app_iot_policy
  BouncerLambdaFunction:
    DependsOn: DeviceLedgerTable
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeviceLobby-Bouncer'
      Events:
        JITR:
          Type: IoTRule
          Properties:
            Sql: SELECT * FROM '$aws/events/certificates/registered/+' 
      Handler: bouncer.handler
      Runtime: nodejs16.x
      CodeUri: ./lambda/bouncer/bouncer.js
      MemorySize: 256
      Timeout: 5
      Policies:
        - Statement:
          - Sid: AllowDeviceLobbyLedgerTableAcces
            Effect: Allow
            Action:
            - dynamodb:UpdateItem
            Resource: 
            - !GetAtt DeviceLedgerTable.Arn
          - Sid: BouncerLogging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*"]]
          - Sid: BouncerIoTActions
            Effect: Allow
            Action:
            - iot:CreateThing
            - iot:AttachThingPrincipal
            - iot:DescribeCertificate
            - iot:UpdateCertificate
            - iot:CreatePolicy
            - iot:AttachPrincipalPolicy
            - iot:RegisterCertificateWithoutCA
            Resource:
            - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*"]]
      Environment: 
        Variables:
          IOT_POLICY : device_in_lobby_iot_policy
          DEVICE_LEDGER_TABLE: devicelobby-ledger
  ReceptionistLambdaFunction:
    DependsOn: DeviceLedgerTable
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeviceLobby-Receptionist'
      Handler: receptionist.handler
      Runtime: nodejs14.x
      CodeUri: ./lambda/receptionist/receptionist.js
      Policies:
        - Statement:
          - Sid: AllowDeviceLobbyLedgerTableGetUpdateAcces
            Effect: Allow
            Action:
            - dynamodb:UpdateItem
            - dynamodb:GetItem
            Resource:
            - !GetAtt DeviceLedgerTable.Arn
          - Sid: ReceptionistLogging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*"]]
          - Sid: ReceptionistIoTActions
            Effect: Allow
            Action:
            - iot:Publish
            Resource:
            - !Join ["", ["arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":topic/lobby/*"]]
      Environment: 
        Variables:
          DEVICE_LEDGER_TABLE: devicelobby-ledger
  ReceptionistInvokePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt ReceptionistLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
  CommissionerLambdaFunction:
    DependsOn: DeviceLedgerTable
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'DeviceLobby-Commissioner'
      Events:
        DDBLedgerChange:
          Type: DynamoDB
          Properties:
            Stream: 
              !GetAtt DeviceLedgerTable.StreamArn
            StartingPosition: LATEST
            BatchSize: 1
            Enabled: true
      Handler: commissioner.handler
      Runtime: nodejs14.x
      CodeUri: ./lambda/commissioner/commissioner.js
      Timeout: 10
      Policies:
        - Statement:
          - Sid: AllowDeviceLobbyLedgerTableStream
            Effect: Allow
            Action:
            - dynamodb:*
            Resource:
            - !GetAtt DeviceLedgerTable.Arn
          - Sid: CommissionerLogging
            Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
            - !Join ["", ["arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*"]]
      Environment: 
        Variables:
          DEVICE_LEDGER_TABLE: devicelobby-ledger
  LobbyReceptionistIoTRule:
    DependsOn: ReceptionistLambdaFunction
    Type: AWS::IoT::TopicRule
    Properties:
      RuleName: 'lobby'
      TopicRulePayload:
        RuleDisabled: 'false'
        Sql: SELECT principal() AS certid, clientid() AS devicename, * FROM '$aws/rules/lobby'
        Actions:
        - Lambda:
            FunctionArn: !GetAtt ReceptionistLambdaFunction.Arn
  DLAdminRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - appsync.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DLAdminPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:UpdateItem
                Resource: 
                  - '*'
  DLCommissionerrole:
    DependsOn: CommissionerLambdaFunction
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: "lobby_commissioner_role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt CommissionerLambdaFunctionRole.Arn
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: lobby_commissioner_iot_policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                - iot:RegisterCertificateWithoutCA
                - iot:RegisterThing
                - iot:CreatePolicy
                - iot:AttachPrincipalPolicy
                - iot:CreateThing
                - iot:AttachThingPrincipal
                - iot:UpdateCertificate
                - iot:DescribeEndpoint
                Resource:
                - '*'
  AdminAPI:
    DependsOn: DeviceLedgerTable
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: "devicelobbyadminAPI"
      AuthenticationType: "API_KEY"
  AdminAPIdatasource:
    DependsOn: 
      - DeviceLedgerTable
      - AdminAPI
      - DLAdminRole
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId
      Name: "deviceledgersourcetable"
      Description: "The ledger table for the device lobby."
      Type: "AMAZON_DYNAMODB"
      ServiceRoleArn: !GetAtt DLAdminRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref "AWS::Region"
        TableName: !Ref "DeviceLedgerTable"
  AdminAPISchema:
    DependsOn: AdminAPI
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId
      DefinitionS3Location: ./admin-interface/appsync/schema.graphql
  AdminAPIaddDeviceResolver:
    DependsOn: AdminAPIdatasource
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId
      TypeName: "Mutation"
      FieldName: "addDevice"
      DataSourceName: !GetAtt AdminAPIdatasource.Name
      RequestMappingTemplateS3Location: ./admin-interface/appsync/resolver_req_addDevice.json
      ResponseMappingTemplateS3Location: ./admin-interface/appsync/resolver_resp_singleitem.json
  AdminAPIgetDeviceResolver:
    DependsOn: AdminAPIdatasource
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId
      TypeName: "Query"
      FieldName: "getDevice"
      DataSourceName: !GetAtt AdminAPIdatasource.Name
      RequestMappingTemplateS3Location: ./admin-interface/appsync/resolver_req_getDevice.json
      ResponseMappingTemplateS3Location: ./admin-interface/appsync/resolver_resp_singleitem.json
  AdminAPIlistDevicesResolver:
    DependsOn: AdminAPIdatasource
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId
      TypeName: "Query"
      FieldName: "listDevices"
      DataSourceName: !GetAtt AdminAPIdatasource.Name
      RequestMappingTemplateS3Location: ./admin-interface/appsync/resolver_req_listDevices.json
      ResponseMappingTemplateS3Location: ./admin-interface/appsync/resolver_resp_listDevices.json
  AdminAPIlistLobbyDevicesResolver:
    DependsOn: AdminAPIdatasource
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId
      TypeName: "Query"
      FieldName: "listLobbyDevices"
      DataSourceName: !GetAtt AdminAPIdatasource.Name
      RequestMappingTemplateS3Location: ./admin-interface/appsync/resolver_req_listLobbyDevices.json
      ResponseMappingTemplateS3Location: ./admin-interface/appsync/resolver_resp_listLobbyDevices.json
  AdminAPIKey:
    DependsOn: AdminAPI
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AdminAPI.ApiId

Outputs:
  DeviceLedgerTableARN:
    Value: !GetAtt DeviceLedgerTable.Arn
  BouncerARN:
    Value: !GetAtt BouncerLambdaFunction.Arn
  ReceptionistARN:
    Value: !GetAtt ReceptionistLambdaFunction.Arn
  CommissionerARN:
    Value: !GetAtt CommissionerLambdaFunction.Arn
  AdminAppSyncAppId:
    Value: !GetAtt AdminAPI.ApiId
  AdminAppSyncAPIKey:
    Value: !GetAtt AdminAPIKey.ApiKey